#include<iostream>
#include<vector>
#include<chrono>
using namespace std;
using namespace std::chrono;
int iterfib(int n){
    vector<int> f;
    f.push_back(0);
    f.push_back(1);
    for(int i=2;i<=n;i++){
        f.push_back(f[i-1]+f[i-2]);
    }
    return f[n];
}
int recurfib(int n){
    if(n<=0) return 0;
    if(n==1 || n==2){
        return 1;
    }
    return recurfib(n-1) + recurfib(n-2);
}
int main(){
    int n ;
    cout << "enter a number:";
    cin >> n;
    // Measure time for iterative Fibonacci
    auto start = high_resolution_clock::now();
    int iterResult = iterfib(n);
    auto stop = high_resolution_clock::now();
    auto iterDuration = duration_cast<microseconds>(stop - start);

    // Measure time for recursive Fibonacci
    start = high_resolution_clock::now();
    int recurResult = recurfib(n);
    stop = high_resolution_clock::now();
    auto recurDuration = duration_cast<microseconds>(stop - start);

    cout << "Iterative Fibonacci: " << iterResult << "\n";
    cout << "Time taken by Iterative Fibonacci: " << iterDuration.count() << " microseconds\n";

    cout << "Recursive Fibonacci: " << recurResult << "\n";
    cout << "Time taken by Recursive Fibonacci: " << recurDuration.count() << " microseconds\n";
}
