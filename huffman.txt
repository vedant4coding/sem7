#include <iostream>
#include <vector>
#include <unordered_map>
#include <queue>
#include <string>
using namespace std;

struct HuffmanNode {
    int frequency;
    char character;
    HuffmanNode* left;
    HuffmanNode* right;

    HuffmanNode(char c, int freq) : character(c), frequency(freq), left(nullptr), right(nullptr) {}
};

// Custom comparator for HuffmanNode
struct HuffmanNodeComparator {
    bool operator()(const HuffmanNode* x, const HuffmanNode* y) const {
        return x->frequency > y->frequency;
    }
};

void printCodes(HuffmanNode* root, string code) {
    if (root->left == nullptr && root->right == nullptr && isalpha(root->character)) {
        cout << root->character << " | " << code << endl;
        return;
    }
    printCodes(root->left, code + "0");
    printCodes(root->right, code + "1");
}

void printTree(HuffmanNode* root, string indent, string branch) {
    if (root != nullptr) {
        cout << indent << branch << root->character << endl;
        printTree(root->left, indent + "| ", "|-");
        printTree(root->right, indent + "  ", "|_");
    }
}

int main() {
    string inputString = "Vedant Navarkar";

    unordered_map<char, int> frequencyMap;
    for (char c : inputString) {
        frequencyMap[c]++;
    }

    int n = frequencyMap.size();
    vector<char> characters(n);
    vector<int> frequencies(n);

    int index = 0;
    for (auto& entry : frequencyMap) {
        characters[index] = entry.first;
        frequencies[index] = entry.second;
        index++;
    }

    priority_queue<HuffmanNode*, vector<HuffmanNode*>, HuffmanNodeComparator> minHeap;

    for (int i = 0; i < n; i++) {
        HuffmanNode* node = new HuffmanNode(characters[i], frequencies[i]);
        minHeap.push(node);
    }

    HuffmanNode* root = nullptr;

    while (minHeap.size() > 1) {
        HuffmanNode* x = minHeap.top();
        minHeap.pop();
        HuffmanNode* y = minHeap.top();
        minHeap.pop();
        HuffmanNode* f = new HuffmanNode('-', x->frequency + y->frequency);
        f->left = x;
        f->right = y;
        root = f;
        minHeap.push(f);
    }

    cout << "Huffman Tree Structure:" << endl;
    printTree(root, "", "");

    cout << "\nCharacter | Huffman Code" << endl;
    cout << "-------------------------" << endl;
    printCodes(root, "");

    return 0;
}
